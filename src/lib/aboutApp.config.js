export default {
  ru: {
    title1: 'Приветствую !!',
    text1: [
      {
        title: '',
        text: 'Это приложение предназначено для учебных целей. Здесь я показываю как использовать  Redux в связке с React. и Да. Вы можете использовать это приложение как шаблон для своих пэт проектов. В данный момент в приложении реализовано 4 паттерна - переключение табов, переключение темы оформления, авторизация  и асинхронное получение данных. Возможно, будут добавлены еще и другие решения.',
      },
    ],
    tableContentTitle1: 'Основные технологии',
    tableContentTitle2: 'Структура приложения',
    tableContentTitle3: 'Немного о стилистике кода',
    tableContenttext1: [
      {
        title: 'react',
        text: '',
      },
      {
        title: 'react-router',
        text: '',
      },
      {
        title: 'react-redux',
        text: '',
      },
      {
        title: 'redux-saga',
        text: '',
      },
      {
        title: 'axios',
        text: '',
      },
      {
        title: 'styled-components',
        text: '',
      },
      {
        title: 'moment.js',
        text: '',
      },
    ],
    tableContenttext2: [
      {
        title: null,
        text: '/public - ничего специального не содержит. Если используете в своих проектах замените title и файл favicon.ico.',
      },
      {
        title: null,
        text: '/src - содержит все части приложения и разделена на логические группы',
      },
      {
        title: null,
        text: '/api - содержит файлы конфигурации для обращения к конкретному АПИ (урлы, запросы, токены пароль и т.д.).',
      },
      {
        title: null,
        text: '/assets - директория для файлов изображений  svg/png/jpg',
      },
      {
        title: null,
        text: '/components - здесь находятся многократно используемые UI компоненты ( кнопка , инпут, контейнер страницы, и т.д).',
      },
      {
        title: null,
        text: '/content  - каждый файл это контейнер для отображения какого либо контента на странице. В контейнер подключается вся логика и UI компоненты.',
      },
      {
        title: null,
        text: '/fonts - папка со шрифтами. шрифты добавлены для примера реализации приложения.',
      },
      {
        title: null,
        text: '/hooks - в этой директории расположены пользовательские хуки.',
      },
      {
        title: null,
        text: '/pages - компоненты для отображения страницы приложения.',
      },
      {
        title: null,
        text: '/redux - в этой директории находятся все компоненты для работы Redux  включая Saga.',
      },
      {
        title: null,
        text: '/styles - здесь все файлы, переменные  и конфигурации для работы со стилями и темами приложения.',
      },
      {
        title: null,
        text: '/App.js - основной файл приложения.',
      },
      {
        title: null,
        text: '/index.js.',
      },
      {
        title: null,
        text: '/Router.js - файл конфигурации страниц в приложении.',
      },
    ],
    tableContenttext3: [
      'Я придерживаюсь правил для написания разных типов файлов. для лучшего понимания кода опишу их ниже.',
      {
        title: 'Часто используемые компоненты.',
        text: 'в верхней части записаны импорты и константы стилей. все пропы описаны через propTypes. все необязательные параметры описаны в default Prop. Не используйте напрямую  в этих компонентах. Хранилище, внутреннее состояние, или разметку с текстом. старайтесь не писать больше 200 строк кода в одном файле.',
      },
      {
        title: 'Компоненты из директории content.',
        text: 'такой компонент собирается из мелких UI компонентов, может содержать свои стили и состояние. Старайтесь вынести всю логику в хук для этого компонента. минимизируйте использование UI элементов , написанных внутри этого компонента. взвесьте все “за” и “против” перед использованием внутреннего состояния.',
      },
      {
        title: 'Хуки.',
        text: 'Не возвращайте разметку в хуке. я предпочитаю возвращать объект , где по названию ключа можно получить необходимый параметр. описывайте здесь всю логику (методы, данные из хранилища и тд)  для работы с определенным компонентом из директории content. Если вы пишите вспомогательный хук например useRouter.js  опишите в комментариях принцип работы и паттерны.',
      },
      {
        title: 'Страницы.',
        text: 'Такой компонент собирается из готовых контейнеров не пишите здесь логику и стили.',
      },
      {
        title: 'Стили.',
        text: 'Использование styled-components позволяет записывать стили прямо в компоненте, что избавляет проект от дополнительных файлов и папок. В этом приложении я умышленно использовал и компоненты, и классы и инлайн стили и анимацию  для того чтобы вы могли  убедится. styled-components это легко! Также, для примера , я добавил переменные и темы. Для того чтобы добавить новую тему вам необходимо добавить свой объект с цветами в файл переменных по примеру baseColors и darkColors. добавить его в экспорт и в файле с темами сконфигурируйте тему со своим набором цветов. Тема автоматически добавиться в селектор выбора темы и на страницу /themes-example.',
      },
      {
        title: 'reducer',
        text: 'для написания нового, скопируйте любой готовый, замените объект initialState, опишите свои кейсы, добавьте типы событий в файл types.js и экспортируйте свой редюсер в индекс файл.',
      },
      {
        title: 'Saga.',
        text: 'написание новой саги аналогично reducer , но саги более объемны и в зависимости от задачи могут кардинально отличаться. Будьте внимательны и читайте доки ))).',
      },
    ],
  },
}
